Skylar Wells
jwel929

1:
A fork creates a different process, without shared memory while a thread is a set of instructions running in one process with shared memory,
you can have many threads but they will all still be running in the same process while forking processess will have many processes split up
and running as separate instances.

Calling execvp takes over the process and ends this process once the command has executed.

In the situation of threads started by pthread create, there is still only one process running, meaning execvp will take over this
process and exit the whole program ending every thread, rather than only the thread meant to be running the command.
This will likely end the program early and will not carry out operations properly.

This is where fork is useful, as fork creates separate processes, we can control which processes are being taken over by
execvp and which are not. This means we can execute commands using execvp, while keeping our program running as intended 
by creating forks made specifically to execute commands.

The pipeline commands are multiple different commands that need to be run in conjunction with one another, and if we are not
careful, execvp will end the program before we have finished running the command

This is why it is important to use fork for each pipeline, as each section of the pipeline is running its own execvp command and
we will need separate processes for each one of these own commands executing to not end the whole program unexpectedly.

This is why pthread_create is lacking for our intended use and cannot be used in the pipeline command situation.

2:
Using CTRL-Z and fg to get process starting and stopping is done with the help of signals. Using a signal handler with SIGTSTP we can
create a method which runs when CTRL-Z is input on the keyboard. We can also get fg running like a normal command.

To stop the process, we make sure to keep track of when jobs enter and leave the foreground. This makes it so that we know which 
job to stop when CTRL-Z is input, and we have to stop whatever foreground process may be running. Once entered, we use a kill command
on this processes ID, with the option of SIGTSTP. This means that the process has entered a stopped state and has essentially paused
anything that this state is doing. This is the stopping part of the signal command.

We also use the WUNTRACED option in any "waitpid" commands needed so that the code continues when processes are stopped with CTRL-Z

Once we want to restart the process, the fg command is entered into the terminal. This only works if there is no process already in the 
foreground, and takes the process that was last used from background or stopped processes. It then moves this process to the foreground
by using the kill command with the SIGCONT option. This continues the specified process. 

Since this is foreground, we also need to make sure that we are waiting for this specified process that has just continued to actually finish.
By adding a waitpid alongside where we start this process back in the foreground, we can make sure that we are waiting for it to finish
before actually being able to run other things. This WAITPID also has WUNTRACED so that when CTRL-Z may be used again we will move
the process straight back to the "stopped" state.

Simplified, we look for the SIGTSTP signal for CTRL-Z, and stop whichever process is being tracked to be in the foreground at that moment.
We then look for the fg command and run SIGCONT on the process that we had stopped, and waitpid in order to start it again in foreground.

This dynamic allows us to stop and restart processes using CTRL-Z and fg commands from the user.
